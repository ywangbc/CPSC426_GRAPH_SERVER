/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef InterNodeComm_H
#define InterNodeComm_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "master_slave_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class InterNodeCommIf {
 public:
  virtual ~InterNodeCommIf() {}
  virtual int32_t add_node_rep(const int32_t node) = 0;
  virtual int32_t remove_node_rep(const int32_t node) = 0;
  virtual int32_t add_edge_rep(const int32_t node1, const int32_t node2) = 0;
  virtual int32_t remove_edge_rep(const int32_t node1, const int32_t node2) = 0;
};

class InterNodeCommIfFactory {
 public:
  typedef InterNodeCommIf Handler;

  virtual ~InterNodeCommIfFactory() {}

  virtual InterNodeCommIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(InterNodeCommIf* /* handler */) = 0;
};

class InterNodeCommIfSingletonFactory : virtual public InterNodeCommIfFactory {
 public:
  InterNodeCommIfSingletonFactory(const boost::shared_ptr<InterNodeCommIf>& iface) : iface_(iface) {}
  virtual ~InterNodeCommIfSingletonFactory() {}

  virtual InterNodeCommIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(InterNodeCommIf* /* handler */) {}

 protected:
  boost::shared_ptr<InterNodeCommIf> iface_;
};

class InterNodeCommNull : virtual public InterNodeCommIf {
 public:
  virtual ~InterNodeCommNull() {}
  int32_t add_node_rep(const int32_t /* node */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t remove_node_rep(const int32_t /* node */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t add_edge_rep(const int32_t /* node1 */, const int32_t /* node2 */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t remove_edge_rep(const int32_t /* node1 */, const int32_t /* node2 */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _InterNodeComm_add_node_rep_args__isset {
  _InterNodeComm_add_node_rep_args__isset() : node(false) {}
  bool node :1;
} _InterNodeComm_add_node_rep_args__isset;

class InterNodeComm_add_node_rep_args {
 public:

  InterNodeComm_add_node_rep_args(const InterNodeComm_add_node_rep_args&);
  InterNodeComm_add_node_rep_args& operator=(const InterNodeComm_add_node_rep_args&);
  InterNodeComm_add_node_rep_args() : node(0) {
  }

  virtual ~InterNodeComm_add_node_rep_args() throw();
  int32_t node;

  _InterNodeComm_add_node_rep_args__isset __isset;

  void __set_node(const int32_t val);

  bool operator == (const InterNodeComm_add_node_rep_args & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    return true;
  }
  bool operator != (const InterNodeComm_add_node_rep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterNodeComm_add_node_rep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InterNodeComm_add_node_rep_pargs {
 public:


  virtual ~InterNodeComm_add_node_rep_pargs() throw();
  const int32_t* node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterNodeComm_add_node_rep_result__isset {
  _InterNodeComm_add_node_rep_result__isset() : success(false) {}
  bool success :1;
} _InterNodeComm_add_node_rep_result__isset;

class InterNodeComm_add_node_rep_result {
 public:

  InterNodeComm_add_node_rep_result(const InterNodeComm_add_node_rep_result&);
  InterNodeComm_add_node_rep_result& operator=(const InterNodeComm_add_node_rep_result&);
  InterNodeComm_add_node_rep_result() : success(0) {
  }

  virtual ~InterNodeComm_add_node_rep_result() throw();
  int32_t success;

  _InterNodeComm_add_node_rep_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const InterNodeComm_add_node_rep_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InterNodeComm_add_node_rep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterNodeComm_add_node_rep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterNodeComm_add_node_rep_presult__isset {
  _InterNodeComm_add_node_rep_presult__isset() : success(false) {}
  bool success :1;
} _InterNodeComm_add_node_rep_presult__isset;

class InterNodeComm_add_node_rep_presult {
 public:


  virtual ~InterNodeComm_add_node_rep_presult() throw();
  int32_t* success;

  _InterNodeComm_add_node_rep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InterNodeComm_remove_node_rep_args__isset {
  _InterNodeComm_remove_node_rep_args__isset() : node(false) {}
  bool node :1;
} _InterNodeComm_remove_node_rep_args__isset;

class InterNodeComm_remove_node_rep_args {
 public:

  InterNodeComm_remove_node_rep_args(const InterNodeComm_remove_node_rep_args&);
  InterNodeComm_remove_node_rep_args& operator=(const InterNodeComm_remove_node_rep_args&);
  InterNodeComm_remove_node_rep_args() : node(0) {
  }

  virtual ~InterNodeComm_remove_node_rep_args() throw();
  int32_t node;

  _InterNodeComm_remove_node_rep_args__isset __isset;

  void __set_node(const int32_t val);

  bool operator == (const InterNodeComm_remove_node_rep_args & rhs) const
  {
    if (!(node == rhs.node))
      return false;
    return true;
  }
  bool operator != (const InterNodeComm_remove_node_rep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterNodeComm_remove_node_rep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InterNodeComm_remove_node_rep_pargs {
 public:


  virtual ~InterNodeComm_remove_node_rep_pargs() throw();
  const int32_t* node;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterNodeComm_remove_node_rep_result__isset {
  _InterNodeComm_remove_node_rep_result__isset() : success(false) {}
  bool success :1;
} _InterNodeComm_remove_node_rep_result__isset;

class InterNodeComm_remove_node_rep_result {
 public:

  InterNodeComm_remove_node_rep_result(const InterNodeComm_remove_node_rep_result&);
  InterNodeComm_remove_node_rep_result& operator=(const InterNodeComm_remove_node_rep_result&);
  InterNodeComm_remove_node_rep_result() : success(0) {
  }

  virtual ~InterNodeComm_remove_node_rep_result() throw();
  int32_t success;

  _InterNodeComm_remove_node_rep_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const InterNodeComm_remove_node_rep_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InterNodeComm_remove_node_rep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterNodeComm_remove_node_rep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterNodeComm_remove_node_rep_presult__isset {
  _InterNodeComm_remove_node_rep_presult__isset() : success(false) {}
  bool success :1;
} _InterNodeComm_remove_node_rep_presult__isset;

class InterNodeComm_remove_node_rep_presult {
 public:


  virtual ~InterNodeComm_remove_node_rep_presult() throw();
  int32_t* success;

  _InterNodeComm_remove_node_rep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InterNodeComm_add_edge_rep_args__isset {
  _InterNodeComm_add_edge_rep_args__isset() : node1(false), node2(false) {}
  bool node1 :1;
  bool node2 :1;
} _InterNodeComm_add_edge_rep_args__isset;

class InterNodeComm_add_edge_rep_args {
 public:

  InterNodeComm_add_edge_rep_args(const InterNodeComm_add_edge_rep_args&);
  InterNodeComm_add_edge_rep_args& operator=(const InterNodeComm_add_edge_rep_args&);
  InterNodeComm_add_edge_rep_args() : node1(0), node2(0) {
  }

  virtual ~InterNodeComm_add_edge_rep_args() throw();
  int32_t node1;
  int32_t node2;

  _InterNodeComm_add_edge_rep_args__isset __isset;

  void __set_node1(const int32_t val);

  void __set_node2(const int32_t val);

  bool operator == (const InterNodeComm_add_edge_rep_args & rhs) const
  {
    if (!(node1 == rhs.node1))
      return false;
    if (!(node2 == rhs.node2))
      return false;
    return true;
  }
  bool operator != (const InterNodeComm_add_edge_rep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterNodeComm_add_edge_rep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InterNodeComm_add_edge_rep_pargs {
 public:


  virtual ~InterNodeComm_add_edge_rep_pargs() throw();
  const int32_t* node1;
  const int32_t* node2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterNodeComm_add_edge_rep_result__isset {
  _InterNodeComm_add_edge_rep_result__isset() : success(false) {}
  bool success :1;
} _InterNodeComm_add_edge_rep_result__isset;

class InterNodeComm_add_edge_rep_result {
 public:

  InterNodeComm_add_edge_rep_result(const InterNodeComm_add_edge_rep_result&);
  InterNodeComm_add_edge_rep_result& operator=(const InterNodeComm_add_edge_rep_result&);
  InterNodeComm_add_edge_rep_result() : success(0) {
  }

  virtual ~InterNodeComm_add_edge_rep_result() throw();
  int32_t success;

  _InterNodeComm_add_edge_rep_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const InterNodeComm_add_edge_rep_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InterNodeComm_add_edge_rep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterNodeComm_add_edge_rep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterNodeComm_add_edge_rep_presult__isset {
  _InterNodeComm_add_edge_rep_presult__isset() : success(false) {}
  bool success :1;
} _InterNodeComm_add_edge_rep_presult__isset;

class InterNodeComm_add_edge_rep_presult {
 public:


  virtual ~InterNodeComm_add_edge_rep_presult() throw();
  int32_t* success;

  _InterNodeComm_add_edge_rep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _InterNodeComm_remove_edge_rep_args__isset {
  _InterNodeComm_remove_edge_rep_args__isset() : node1(false), node2(false) {}
  bool node1 :1;
  bool node2 :1;
} _InterNodeComm_remove_edge_rep_args__isset;

class InterNodeComm_remove_edge_rep_args {
 public:

  InterNodeComm_remove_edge_rep_args(const InterNodeComm_remove_edge_rep_args&);
  InterNodeComm_remove_edge_rep_args& operator=(const InterNodeComm_remove_edge_rep_args&);
  InterNodeComm_remove_edge_rep_args() : node1(0), node2(0) {
  }

  virtual ~InterNodeComm_remove_edge_rep_args() throw();
  int32_t node1;
  int32_t node2;

  _InterNodeComm_remove_edge_rep_args__isset __isset;

  void __set_node1(const int32_t val);

  void __set_node2(const int32_t val);

  bool operator == (const InterNodeComm_remove_edge_rep_args & rhs) const
  {
    if (!(node1 == rhs.node1))
      return false;
    if (!(node2 == rhs.node2))
      return false;
    return true;
  }
  bool operator != (const InterNodeComm_remove_edge_rep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterNodeComm_remove_edge_rep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class InterNodeComm_remove_edge_rep_pargs {
 public:


  virtual ~InterNodeComm_remove_edge_rep_pargs() throw();
  const int32_t* node1;
  const int32_t* node2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterNodeComm_remove_edge_rep_result__isset {
  _InterNodeComm_remove_edge_rep_result__isset() : success(false) {}
  bool success :1;
} _InterNodeComm_remove_edge_rep_result__isset;

class InterNodeComm_remove_edge_rep_result {
 public:

  InterNodeComm_remove_edge_rep_result(const InterNodeComm_remove_edge_rep_result&);
  InterNodeComm_remove_edge_rep_result& operator=(const InterNodeComm_remove_edge_rep_result&);
  InterNodeComm_remove_edge_rep_result() : success(0) {
  }

  virtual ~InterNodeComm_remove_edge_rep_result() throw();
  int32_t success;

  _InterNodeComm_remove_edge_rep_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const InterNodeComm_remove_edge_rep_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const InterNodeComm_remove_edge_rep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InterNodeComm_remove_edge_rep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _InterNodeComm_remove_edge_rep_presult__isset {
  _InterNodeComm_remove_edge_rep_presult__isset() : success(false) {}
  bool success :1;
} _InterNodeComm_remove_edge_rep_presult__isset;

class InterNodeComm_remove_edge_rep_presult {
 public:


  virtual ~InterNodeComm_remove_edge_rep_presult() throw();
  int32_t* success;

  _InterNodeComm_remove_edge_rep_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class InterNodeCommClient : virtual public InterNodeCommIf {
 public:
  InterNodeCommClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  InterNodeCommClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add_node_rep(const int32_t node);
  void send_add_node_rep(const int32_t node);
  int32_t recv_add_node_rep();
  int32_t remove_node_rep(const int32_t node);
  void send_remove_node_rep(const int32_t node);
  int32_t recv_remove_node_rep();
  int32_t add_edge_rep(const int32_t node1, const int32_t node2);
  void send_add_edge_rep(const int32_t node1, const int32_t node2);
  int32_t recv_add_edge_rep();
  int32_t remove_edge_rep(const int32_t node1, const int32_t node2);
  void send_remove_edge_rep(const int32_t node1, const int32_t node2);
  int32_t recv_remove_edge_rep();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class InterNodeCommProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<InterNodeCommIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (InterNodeCommProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add_node_rep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_node_rep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_edge_rep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_edge_rep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  InterNodeCommProcessor(boost::shared_ptr<InterNodeCommIf> iface) :
    iface_(iface) {
    processMap_["add_node_rep"] = &InterNodeCommProcessor::process_add_node_rep;
    processMap_["remove_node_rep"] = &InterNodeCommProcessor::process_remove_node_rep;
    processMap_["add_edge_rep"] = &InterNodeCommProcessor::process_add_edge_rep;
    processMap_["remove_edge_rep"] = &InterNodeCommProcessor::process_remove_edge_rep;
  }

  virtual ~InterNodeCommProcessor() {}
};

class InterNodeCommProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  InterNodeCommProcessorFactory(const ::boost::shared_ptr< InterNodeCommIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< InterNodeCommIfFactory > handlerFactory_;
};

class InterNodeCommMultiface : virtual public InterNodeCommIf {
 public:
  InterNodeCommMultiface(std::vector<boost::shared_ptr<InterNodeCommIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~InterNodeCommMultiface() {}
 protected:
  std::vector<boost::shared_ptr<InterNodeCommIf> > ifaces_;
  InterNodeCommMultiface() {}
  void add(boost::shared_ptr<InterNodeCommIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t add_node_rep(const int32_t node) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_node_rep(node);
    }
    return ifaces_[i]->add_node_rep(node);
  }

  int32_t remove_node_rep(const int32_t node) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_node_rep(node);
    }
    return ifaces_[i]->remove_node_rep(node);
  }

  int32_t add_edge_rep(const int32_t node1, const int32_t node2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_edge_rep(node1, node2);
    }
    return ifaces_[i]->add_edge_rep(node1, node2);
  }

  int32_t remove_edge_rep(const int32_t node1, const int32_t node2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_edge_rep(node1, node2);
    }
    return ifaces_[i]->remove_edge_rep(node1, node2);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class InterNodeCommConcurrentClient : virtual public InterNodeCommIf {
 public:
  InterNodeCommConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  InterNodeCommConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add_node_rep(const int32_t node);
  int32_t send_add_node_rep(const int32_t node);
  int32_t recv_add_node_rep(const int32_t seqid);
  int32_t remove_node_rep(const int32_t node);
  int32_t send_remove_node_rep(const int32_t node);
  int32_t recv_remove_node_rep(const int32_t seqid);
  int32_t add_edge_rep(const int32_t node1, const int32_t node2);
  int32_t send_add_edge_rep(const int32_t node1, const int32_t node2);
  int32_t recv_add_edge_rep(const int32_t seqid);
  int32_t remove_edge_rep(const int32_t node1, const int32_t node2);
  int32_t send_remove_edge_rep(const int32_t node1, const int32_t node2);
  int32_t recv_remove_edge_rep(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
